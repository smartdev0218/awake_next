{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\projects\\\\4.23\\\\awake-nextjs-refactored1\\\\src\\\\context\\\\user-info.tsx\";\nimport { createContext, useContext, useMemo, useState } from 'react';\nexport const UserInfoContext = /*#__PURE__*/createContext({});\nUserInfoContext.displayName = 'UserInfoContext';\nexport const UserInfoProvider = ({\n  children\n}) => {\n  const {\n    0: phoneNumber,\n    1: setPhoneNumber\n  } = useState(null);\n  const {\n    0: verificationCode,\n    1: setVerificationCode\n  } = useState(null);\n  const {\n    0: userName,\n    1: setUserName\n  } = useState(null);\n  const value = useMemo(() => ({\n    phoneNumber,\n    setPhoneNumber,\n    verificationCode,\n    setVerificationCode,\n    userName,\n    setUserName\n  }), [phoneNumber, setPhoneNumber, verificationCode, setVerificationCode, userName, setUserName]);\n  return /*#__PURE__*/_jsxDEV(UserInfoContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\nexport const useUserInfo = () => {\n  const context = useContext(UserInfoContext);\n\n  if (context === undefined) {\n    throw new Error('useUserInfo hook must be used within a UserInfoProvider component');\n  }\n\n  return context;\n};","map":{"version":3,"sources":["E:/projects/4.23/awake-nextjs-refactored1/src/context/user-info.tsx"],"names":["createContext","useContext","useMemo","useState","UserInfoContext","displayName","UserInfoProvider","children","phoneNumber","setPhoneNumber","verificationCode","setVerificationCode","userName","setUserName","value","useUserInfo","context","undefined","Error"],"mappings":";;AAAA,SAASA,aAAT,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,QAAjD,QAAiE,OAAjE;AAWA,OAAO,MAAMC,eAAe,gBAAGJ,aAAa,CAC1C,EAD0C,CAArC;AAIPI,eAAe,CAACC,WAAhB,GAA8B,iBAA9B;AAEA,OAAO,MAAMC,gBAAoB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAgB,IAAhB,CAA9C;AACA,QAAM;AAAA,OAACO,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CR,QAAQ,CAAgB,IAAhB,CAAxD;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAgB,IAAhB,CAAxC;AAEA,QAAMW,KAAK,GAAGZ,OAAO,CACnB,OAAO;AACLM,IAAAA,WADK;AAELC,IAAAA,cAFK;AAGLC,IAAAA,gBAHK;AAILC,IAAAA,mBAJK;AAKLC,IAAAA,QALK;AAMLC,IAAAA;AANK,GAAP,CADmB,EASnB,CACEL,WADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,mBAJF,EAKEC,QALF,EAMEC,WANF,CATmB,CAArB;AAmBA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEC,KAAjC;AAAA,cACGP;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7BM;AA+BP,OAAO,MAAMQ,WAAW,GAAG,MAAwB;AACjD,QAAMC,OAAO,GAAGf,UAAU,CAACG,eAAD,CAA1B;;AACA,MAAIY,OAAO,KAAKC,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CACJ,mEADI,CAAN;AAGD;;AACD,SAAOF,OAAP;AACD,CARM","sourcesContent":["import { createContext, FC, useContext, useMemo, useState } from 'react'\r\n\r\nexport interface IUserInfoContext {\r\n  phoneNumber: string | null\r\n  setPhoneNumber: (phone: string | null) => void\r\n  userName: string | null\r\n  setUserName: (userName: string | null) => void\r\n  verificationCode: string | null\r\n  setVerificationCode: (verificationCode: string | null) => void\r\n}\r\n\r\nexport const UserInfoContext = createContext<IUserInfoContext>(\r\n  {} as IUserInfoContext\r\n)\r\n\r\nUserInfoContext.displayName = 'UserInfoContext'\r\n\r\nexport const UserInfoProvider: FC = ({ children }) => {\r\n  const [phoneNumber, setPhoneNumber] = useState<string | null>(null)\r\n  const [verificationCode, setVerificationCode] = useState<string | null>(null)\r\n  const [userName, setUserName] = useState<string | null>(null)\r\n\r\n  const value = useMemo(\r\n    () => ({\r\n      phoneNumber,\r\n      setPhoneNumber,\r\n      verificationCode,\r\n      setVerificationCode,\r\n      userName,\r\n      setUserName,\r\n    }),\r\n    [\r\n      phoneNumber,\r\n      setPhoneNumber,\r\n      verificationCode,\r\n      setVerificationCode,\r\n      userName,\r\n      setUserName,\r\n    ]\r\n  )\r\n\r\n  return (\r\n    <UserInfoContext.Provider value={value}>\r\n      {children}\r\n    </UserInfoContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useUserInfo = (): IUserInfoContext => {\r\n  const context = useContext(UserInfoContext)\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      'useUserInfo hook must be used within a UserInfoProvider component'\r\n    )\r\n  }\r\n  return context\r\n}\r\n"]},"metadata":{},"sourceType":"module"}