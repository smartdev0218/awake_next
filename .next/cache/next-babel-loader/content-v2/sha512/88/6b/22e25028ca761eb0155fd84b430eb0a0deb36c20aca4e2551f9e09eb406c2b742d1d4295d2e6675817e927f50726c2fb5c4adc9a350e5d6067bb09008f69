{"ast":null,"code":"import _regeneratorRuntime from \"E:/projects/4.23/awake-nextjs-refactored1/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/projects/4.23/awake-nextjs-refactored1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport * as allSettled from 'promise.allsettled';\nallSettled.shim();\nvar prodUrl = 'http://localhost:8080/api/';\nexport var loadedUrl = false;\nexport var axiosClient = axios.create({\n  baseURL: prodUrl,\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8'\n  }\n});\nexport var setAuthTokenHeaders = function setAuthTokenHeaders(newToken) {\n  axiosClient.defaults.headers = {\n    authorization: newToken,\n    'Content-Type': 'application/json; charset=UTF-8'\n  };\n};\n/**\r\n * Finds the running dev server, if it's production it instantely sets the url.\r\n */\n\nexport var findDevServerUrl = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var urlsToTry;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", prodUrl);\n\n          case 3:\n            if (!false) {\n              _context.next = 6;\n              break;\n            }\n\n            loadedUrl = true;\n            return _context.abrupt(\"return\", prodUrl);\n\n          case 6:\n            urlsToTry = ['http://localhost:8080/api/', 'http://192.168.0.227:8080/api/', 'http://192.168.0.203:8080/api/', 'http://10.0.2.2:8080/api/', 'https://ss.ew.r.appspot.com/api/', prodUrl];\n            _context.next = 9;\n            return new Promise(function (resove, reject) {\n              Promise.allSettled(urlsToTry.map(function (url) {\n                return axios.get(url, {\n                  timeout: 250\n                });\n              })).then(function (results) {\n                if (results.length === 0) {\n                  console.error('Could not find any dev URL.');\n                  reject();\n                  return '';\n                } // Filter by success.\n\n\n                results = results.filter(function (r) {\n                  return r.status === 'fulfilled';\n                }); // Use the first one\n                // @ts-ignore\n\n                var baseUrl = results[0].value.config.url;\n                axiosClient.defaults.baseURL = baseUrl;\n                console.log('Using dev server: ' + baseUrl + ', (of ' + results.length + ' success)');\n                loadedUrl = true;\n                resove(baseUrl);\n              });\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function findDevServerUrl() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["E:/projects/4.23/awake-nextjs-refactored1/src/utils/axios-client.ts"],"names":["axios","allSettled","shim","prodUrl","loadedUrl","axiosClient","create","baseURL","headers","setAuthTokenHeaders","newToken","defaults","authorization","findDevServerUrl","urlsToTry","Promise","resove","reject","map","url","get","timeout","then","results","length","console","error","filter","r","status","baseUrl","value","config","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,UAAZ,MAA4B,oBAA5B;AAEAA,UAAU,CAACC,IAAX;AAEA,IAAMC,OAAO,GAAG,4BAAhB;AACA,OAAO,IAAIC,SAAS,GAAG,KAAhB;AAEP,OAAO,IAAMC,WAAW,GAAGL,KAAK,CAACM,MAAN,CAAa;AACtCC,EAAAA,OAAO,EAAEJ,OAD6B;AAEtCK,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAF6B,CAAb,CAApB;AAOP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAsB;AACvDL,EAAAA,WAAW,CAACM,QAAZ,CAAqBH,OAArB,GAA+B;AAC7BI,IAAAA,aAAa,EAAEF,QADc;AAE7B,oBAAgB;AAFa,GAA/B;AAID,CALM;AAOP;AACA;AACA;;AACA,OAAO,IAAMG,gBAAgB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEvBV,OAFuB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS5BC,YAAAA,SAAS,GAAG,IAAZ;AAT4B,6CAUrBD,OAVqB;;AAAA;AAaxBW,YAAAA,SAbwB,GAaZ,CAChB,4BADgB,EAEhB,gCAFgB,EAGhB,gCAHgB,EAIhB,2BAJgB,EAKhB,kCALgB,EAMhBX,OANgB,CAbY;AAAA;AAAA,mBAsBjB,IAAIY,OAAJ,CAAY,UAACC,MAAD,EAASC,MAAT,EAAoB;AAC3CF,cAAAA,OAAO,CAACd,UAAR,CACEa,SAAS,CAACI,GAAV,CAAc,UAACC,GAAD;AAAA,uBAASnB,KAAK,CAACoB,GAAN,CAAUD,GAAV,EAAe;AAAEE,kBAAAA,OAAO,EAAE;AAAX,iBAAf,CAAT;AAAA,eAAd,CADF,EAEEC,IAFF,CAEO,UAACC,OAAD,EAAa;AAClB,oBAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxBC,kBAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd;AACAT,kBAAAA,MAAM;AACN,yBAAO,EAAP;AACD,iBALiB,CAOlB;;;AACAM,gBAAAA,OAAO,GAAGA,OAAO,CAACI,MAAR,CAAe,UAACC,CAAD;AAAA,yBAAOA,CAAC,CAACC,MAAF,KAAa,WAApB;AAAA,iBAAf,CAAV,CARkB,CAUlB;AACA;;AACA,oBAAMC,OAAO,GAAGP,OAAO,CAAC,CAAD,CAAP,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBb,GAAxC;AAEAd,gBAAAA,WAAW,CAACM,QAAZ,CAAqBJ,OAArB,GAA+BuB,OAA/B;AACAL,gBAAAA,OAAO,CAACQ,GAAR,CACE,uBAAuBH,OAAvB,GAAiC,QAAjC,GAA4CP,OAAO,CAACC,MAApD,GAA6D,WAD/D;AAIApB,gBAAAA,SAAS,GAAG,IAAZ;AAEAY,gBAAAA,MAAM,CAACc,OAAD,CAAN;AACD,eAxBD;AAyBD,aA1BY,CAtBiB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBjB,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import axios from 'axios'\r\nimport * as allSettled from 'promise.allsettled'\r\n\r\nallSettled.shim()\r\n\r\nconst prodUrl = 'http://localhost:8080/api/'\r\nexport let loadedUrl = false\r\n\r\nexport const axiosClient = axios.create({\r\n  baseURL: prodUrl,\r\n  headers: {\r\n    'Content-Type': 'application/json; charset=UTF-8',\r\n  },\r\n})\r\n\r\nexport const setAuthTokenHeaders = (newToken: string) => {\r\n  axiosClient.defaults.headers = {\r\n    authorization: newToken,\r\n    'Content-Type': 'application/json; charset=UTF-8',\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the running dev server, if it's production it instantely sets the url.\r\n */\r\nexport const findDevServerUrl = async (): Promise<string> => {\r\n  // Shortcut\r\n  return prodUrl\r\n\r\n  if (loadedUrl) {\r\n    return axiosClient.defaults.baseURL\r\n  }\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    loadedUrl = true\r\n    return prodUrl\r\n  }\r\n\r\n  const urlsToTry = [\r\n    'http://localhost:8080/api/',\r\n    'http://192.168.0.227:8080/api/',\r\n    'http://192.168.0.203:8080/api/',\r\n    'http://10.0.2.2:8080/api/',\r\n    'https://ss.ew.r.appspot.com/api/',\r\n    prodUrl,\r\n  ]\r\n\r\n  return await new Promise((resove, reject) => {\r\n    Promise.allSettled(\r\n      urlsToTry.map((url) => axios.get(url, { timeout: 250 }))\r\n    ).then((results) => {\r\n      if (results.length === 0) {\r\n        console.error('Could not find any dev URL.')\r\n        reject()\r\n        return ''\r\n      }\r\n\r\n      // Filter by success.\r\n      results = results.filter((r) => r.status === 'fulfilled')\r\n\r\n      // Use the first one\r\n      // @ts-ignore\r\n      const baseUrl = results[0].value.config.url\r\n\r\n      axiosClient.defaults.baseURL = baseUrl\r\n      console.log(\r\n        'Using dev server: ' + baseUrl + ', (of ' + results.length + ' success)'\r\n      )\r\n\r\n      loadedUrl = true\r\n\r\n      resove(baseUrl)\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}